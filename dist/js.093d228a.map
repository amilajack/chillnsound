{"version":3,"sources":["js/index.js"],"names":["all_sounds","document","querySelectorAll","i","length","addEventListener","loadedSounds","load","loaded","percent","e","Math","floor","querySelector","innerText","style","width","removeEventListener","setTimeout","fadeOutLoader","fadeTarget","getElementById","opacity","removeChild","hours","minutes","seconds","separator","play_btn","playSound","volume_control","volumeSound","mute_btn","is_muted","muteDocument","reset_btn","targetElement","target","srcElement","selectedSound","parentElement","volumeControler","soundImage","paused","loop","value","volume","play","classList","add","pause","currentTime","remove","console","log","event","type","vol","clock","now","Date","twelveHrTime","getHours","getMinutes","resetSounds","interval","setInterval","playing_sounds","display","forEach","sound","all_audio","push","all_play_btns","all_volume_control"],"mappings":"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","file":"js.093d228a.map","sourceRoot":"../src","sourcesContent":["// DOM Elements with sound\nconst all_sounds = document.querySelectorAll('audio');\n\nfor (var i = 0; i < all_sounds.length; i++) {\n  all_sounds[i].addEventListener('canplaythrough', loadedSounds, false);\n  all_sounds[i].load();\t// Force reload in case some audio files already loaded to avoid stuck loading screen\n}\n\nlet loaded = 0;\nlet percent = 0;\nfunction loadedSounds(e) {\n  loaded++; // Increment loaded counter to check if all sounds can be played\n  percent = Math.floor(100 * loaded / all_sounds.length); // Calculate percentage\n  document.querySelector('.load_status').innerText = `${percent}%`; // Set textual percentage to load status\n  document.querySelector('.load_fill').style.width = `${percent}%`;\n\n  // console.log(percent);\n  if (loaded == all_sounds.length) {\n    // alert('Loaded!');\n    for (let i = 0; i < all_sounds.length; i++) {\n      all_sounds[i].removeEventListener('canplaythrough', loadedSounds);\n    }\n    setTimeout(fadeOutLoader, 1000);\n  }\n}\n\nfunction fadeOutLoader() {\n  const fadeTarget = document.getElementById('load_screen');\n  fadeTarget.style.opacity = 0;\n  setTimeout(() => {\t// Remove node\n    document.querySelector('body').removeChild(fadeTarget);\n  }, 2000);\n}\n\n// DOM Elements for clock control\nconst hours = document.querySelector('.hours');\nconst minutes = document.querySelector('.minutes');\nconst seconds = document.querySelector('.seconds');\nconst separator = document.querySelector('.separator');\n\n// DOM Elements that control play/stop sounds\nconst play_btn = document.querySelectorAll('.play');\n\n// Adding listeners to every play/stop button\nfor (var i = 0; i < play_btn.length; i++) {\n  play_btn[i].addEventListener('click', playSound, false);\n}\n\n// DOM elements that controll sound volume\nconst volume_control = document.querySelectorAll('.volume_bar');\n\n// Adding listeners to every volume control slider\nfor (var i = 0; i < volume_control.length; i++) {\n  volume_control[i].addEventListener('input', volumeSound, false);\n  volume_control[i].style.opacity = 0;\n}\n\n// DOM element that mutes and unmutes the page\nconst mute_btn = document.querySelector('.mute_btn a');\nlet is_muted = false;\nmute_btn.addEventListener('click', muteDocument, false);\n\n// DOM element that resets the sounds\nconst reset_btn = document.querySelector('.reset_btn a');\nreset_btn.addEventListener('click', resetSounds, false);\n\n\n// Controlling stoping and playing the sound\nfunction playSound(e) {\n  if (is_muted) {\n    muteDocument();\n  }\n  const targetElement = e.target || e.srcElement;\n  const selectedSound = targetElement.parentElement.parentElement.querySelector('audio');\n  const volumeControler = targetElement.parentElement.parentElement.querySelector('.volume_bar');\n  const soundImage = targetElement.parentElement.parentElement.querySelector('img');\n\n  if (selectedSound.paused) {\n    volumeControler.style.opacity = 1;\n    selectedSound.loop = true;\n    if (volumeControler.value === 0) {\n      volumeControler.value = 0.1;\n    }\n    selectedSound.volume = volumeControler.value;\n    selectedSound.play();\n    soundImage.classList.add('playing');\n  } else {\n    volumeControler.style.opacity = 0;\n    selectedSound.pause();\n    selectedSound.currentTime = 0;\n    volumeControler.value = 0;\n    soundImage.classList.remove('playing');\n  }\n  console.log(event.target.type);\n  console.log(selectedSound);\n}\n\n// Controlling volume of the sounds\nfunction volumeSound(e) {\n  if (is_muted) {\n    muteDocument();\n  }\n  const targetElement = e.target || e.srcElement;\n  const vol = targetElement.value;\n  const selectedSound = targetElement.parentElement.querySelector('audio');\n  selectedSound.volume = vol;\n}\n\nfunction clock() {\n  const now = new Date();\n  const twelveHrTime = ((now.getHours() + 11) % 12 + 1);\n  hours.innerText = twelveHrTime < 10 ? `0${twelveHrTime}` : twelveHrTime;\n  minutes.innerText = now.getMinutes() < 10 ? `0${now.getMinutes()}` : now.getMinutes();\n}\nclock();\nconst interval = setInterval(clock, 1000);\n\nconst playing_sounds = [];\nfunction muteDocument() {\n  if (!is_muted) {\n    playing_sounds.length = 0;\n    is_muted = true;\n    document.querySelector('.unmuted').style.display = 'none';\n    document.querySelector('.muted').style.display = 'inline';\n    const all_audio = document.querySelectorAll('audio');\n    for (let i = 0; i < all_audio.length; i++) {\n      if (!all_audio[i].paused) {\n        playing_sounds.push([all_audio[i], all_audio[i].volume]);\n      }\n    }\n    playing_sounds.forEach((sound) => {\n      sound[0].volume = 0;\n    });\n  } else {\n    is_muted = false;\n    document.querySelector('.unmuted').style.display = 'inline';\n    document.querySelector('.muted').style.display = 'none';\n    playing_sounds.forEach((sound) => {\n      sound[0].volume = sound[1];\n    });\n  }\n}\n\nfunction resetSounds() {\n  const all_audio = document.querySelectorAll('audio');\n  for (var i = 0; i < all_audio.length; i++) {\n    all_audio[i].pause();\n    all_audio[i].currentTime = 0;\n    all_audio[i].value = 0;\n  }\n  const all_play_btns = document.querySelectorAll('.start_btn img');\n  for (var i = 0; i < all_play_btns.length; i++) {\n    all_play_btns[i].classList.remove('playing');\n  }\n  const all_volume_control = document.querySelectorAll('.volume_bar');\n  for (var i = 0; i < all_volume_control.length; i++) {\n    all_volume_control[i].value = 0;\n    all_volume_control[i].style.opacity = 0;\n  }\n}\n"]}