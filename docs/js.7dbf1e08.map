{"version":3,"sources":["src/js/index.js"],"names":["all_sounds","document","querySelectorAll","i","length","addEventListener","loadedSounds","load","loaded","percent","e","Math","floor","querySelector","innerText","style","width","removeEventListener","fadeOutLoader","fadeTarget","getElementById","opacity","removeChild","hours","minutes","seconds","separator","play_btn","playSound","volume_control","volumeSound","mute_btn","is_muted","muteDocument","reset_btn","targetElement","target","srcElement","selectedSound","parentElement","volumeControler","soundImage","paused","loop","value","volume","play","classList","add","pause","currentTime","remove","log","event","type","vol","clock","days","now","Date","getHours","getMinutes","resetSounds","interval","setInterval","playing_sounds","display","forEach","sound","all_audio","push","all_play_btns","all_volume_control"],"mappings":"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","file":"js.7dbf1e08.map","sourceRoot":"..","sourcesContent":["// DOM Elements with sound\nconst all_sounds = document.querySelectorAll('audio');\n\nfor (var i = 0; i < all_sounds.length; i++) {\n  all_sounds[i].addEventListener('canplaythrough', loadedSounds, false);\n  all_sounds[i].load();\t// Force reload in case some audio files already loaded to avoid stuck loading screen\n}\n\nlet loaded = 0;\nlet percent = 0;\nfunction loadedSounds(e) {\n  loaded++; // Increment loaded counter to check if all sounds can be played\n  percent = Math.floor(100 * loaded / all_sounds.length); // Calculate percentage\n  document.querySelector('.load_status').innerText = `${percent}%`; // Set textual percentage to load status\n  document.querySelector('.load_fill').style.width = `${percent}%`;\n\n  // console.log(percent);\n  if (loaded == all_sounds.length) {\n    // alert('Loaded!');\n    for (let i = 0; i < all_sounds.length; i++) {\n      all_sounds[i].removeEventListener('canplaythrough', loadedSounds);\n    }\n    setTimeout(fadeOutLoader, 1000);\n  }\n}\n\nfunction fadeOutLoader() {\n  const fadeTarget = document.getElementById('load_screen');\n  fadeTarget.style.opacity = 0;\n  setTimeout(() => {\t// Remove node\n    document.querySelector('body').removeChild(fadeTarget);\n  }, 2000);\n}\n\n// DOM Elements for clock control\nconst hours = document.querySelector('.hours');\nconst minutes = document.querySelector('.minutes');\nconst seconds = document.querySelector('.seconds');\nconst separator = document.querySelector('.separator');\n\n// DOM Elements that control play/stop sounds\nconst play_btn = document.querySelectorAll('.play');\n\n// Adding listeners to every play/stop button\nfor (var i = 0; i < play_btn.length; i++) {\n  play_btn[i].addEventListener('click', playSound, false);\n}\n\n// DOM elements that controll sound volume\nconst volume_control = document.querySelectorAll('.volume_bar');\n\n// Adding listeners to every volume control slider\nfor (var i = 0; i < volume_control.length; i++) {\n  volume_control[i].addEventListener('input', volumeSound, false);\n  volume_control[i].style.opacity = 0;\n}\n\n// DOM element that mutes and unmutes the page\nconst mute_btn = document.querySelector('.mute_btn a');\nlet is_muted = false;\nmute_btn.addEventListener('click', muteDocument, false);\n\n// DOM element that resets the sounds\nconst reset_btn = document.querySelector('.reset_btn a');\nreset_btn.addEventListener('click', resetSounds, false);\n\n\n// Controlling stoping and playing the sound\nfunction playSound(e) {\n  if (is_muted) {\n    muteDocument();\n  }\n  const targetElement = e.target || e.srcElement;\n  const selectedSound = targetElement.parentElement.parentElement.querySelector('audio');\n  const volumeControler = targetElement.parentElement.parentElement.querySelector('.volume_bar');\n  const soundImage = targetElement.parentElement.parentElement.querySelector('img');\n\n  if (selectedSound.paused) {\n    volumeControler.style.opacity = 1;\n    selectedSound.loop = true;\n    if (volumeControler.value == 0) {\n      volumeControler.value = 0.1;\n    }\n    selectedSound.volume = volumeControler.value;\n    selectedSound.play();\n    soundImage.classList.add('playing');\n  } else {\n    volumeControler.style.opacity = 0;\n    selectedSound.pause();\n    selectedSound.currentTime = 0;\n    volumeControler.value = 0;\n    soundImage.classList.remove('playing');\n  }\n  console.log(event.target.type);\n  console.log(selectedSound);\n}\n\n// Controlling volume of the sounds\nfunction volumeSound(e) {\n  if (is_muted) {\n    muteDocument();\n  }\n  const targetElement = e.target || e.srcElement;\n  const vol = targetElement.value;\n  const selectedSound = targetElement.parentElement.querySelector('audio');\n  selectedSound.volume = vol;\n}\n\nfunction clock() {\n  const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n  const months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n  const now = new Date();\n  // if (now.getSeconds()==0 || now.getMinutes==0) {\n  // \tseparator.classList.add(\"blink\");\n  // }\n  hours.innerText = now.getHours() < 10 ? `0${now.getHours()}` : now.getHours();\n  minutes.innerText = now.getMinutes() < 10 ? `0${now.getMinutes()}` : now.getMinutes();\n  // seconds.innerText = now.getSeconds()<10?\"0\"+now.getSeconds():now.getSeconds();\n}\nclock();\nconst interval = setInterval(clock, 1000);\n\nconst playing_sounds = [];\nfunction muteDocument() {\n  if (!is_muted) {\n    playing_sounds.length = 0;\n    is_muted = true;\n    document.querySelector('.unmuted').style.display = 'none';\n    document.querySelector('.muted').style.display = 'inline';\n    const all_audio = document.querySelectorAll('audio');\n    for (let i = 0; i < all_audio.length; i++) {\n      if (!all_audio[i].paused) {\n        playing_sounds.push([all_audio[i], all_audio[i].volume]);\n      }\n    }\n    playing_sounds.forEach((sound) => {\n      sound[0].volume = 0;\n    });\n  } else {\n    is_muted = false;\n    document.querySelector('.unmuted').style.display = 'inline';\n    document.querySelector('.muted').style.display = 'none';\n    playing_sounds.forEach((sound) => {\n      sound[0].volume = sound[1];\n    });\n  }\n}\n\nfunction resetSounds() {\n  const all_audio = document.querySelectorAll('audio');\n  for (var i = 0; i < all_audio.length; i++) {\n    all_audio[i].pause();\n    all_audio[i].currentTime = 0;\n    all_audio[i].value = 0;\n  }\n  const all_play_btns = document.querySelectorAll('.start_btn img');\n  for (var i = 0; i < all_play_btns.length; i++) {\n    all_play_btns[i].classList.remove('playing');\n  }\n  const all_volume_control = document.querySelectorAll('.volume_bar');\n  for (var i = 0; i < all_volume_control.length; i++) {\n    all_volume_control[i].value = 0;\n    all_volume_control[i].style.opacity = 0;\n  }\n}\n"]}